s11 = "11", s12 = "12") %>%
select(-sduration)
# Convert NA to ""
df15_startc[is.na(df15_startc)] <- ""
# Merge rows ---> data for one station (sid) store in a singal row
df15_startc <- df15_startc %>% group_by(sid) %>%
summarise_all(funs(trimws(paste(., collapse = ''))))
# Convert the class of hourly count from string to numeric
cols.num <- paste0("s", 1:12)
df15_startc[cols.num] <- sapply(df15_startc[cols.num], as.numeric)
# Fill no data with 0
df15_startc[is.na(df15_startc)] <- 0
# Get the annually median trip duration for each station
df15_startd <-
df15 %>% select(origin, tripduration) %>%
group_by(origin) %>%
summarise_all(funs(median)) %>%
rename(sid = origin,
sduration = tripduration)
# Station (origin) usage profile
df15_startP <- left_join(df15_startc, df15_startd, by = "sid")
###*******************************************************************
### Station as destination
df15_end <-
df15 %>% select(destination, tripduration, tripcount, month) %>%
group_by(destination, month) %>%
summarise_all(funs(sum, median)) %>%
select(destination, tripcount_sum, tripduration_median, month) %>%
rename(sid = destination,
scount = tripcount_sum, sduration = tripduration_median)
# Count the total number of destination usage by month
df15_endc <- df15_end %>% spread(month, scount) %>% rename(e1 = "1", e2 = "2",
e3 = "3", e4 = "4",
e5 = "5", e6 = "6",
e7 = "7", e8 = "8",
e9 = "9", e10 = "10",
e11 = "11", e12 = "12") %>%
select(-sduration)
# Convert NA to ""
df15_endc[is.na(df15_endc)] <- ""
# Merge rows ---> data for one station (sid) store in a singal row
df15_endc <- df15_endc %>% group_by(sid) %>%
summarise_all(funs(trimws(paste(., collapse = ''))))
# Convert the class of hourly count from string to numeric
cols.num <- paste0("e", 1:12)
df15_endc[cols.num] <- sapply(df15_endc[cols.num], as.numeric)
# Fill no data with 0
df15_endc[is.na(df15_endc)] <- 0
# Get the annually median trip duration for each station
df15_endd <-
df15 %>% select(destination, tripduration) %>%
group_by(destination) %>%
summarise_all(funs(median)) %>%
rename(sid = destination,
eduration = tripduration)
# Station (destination) usage profile
df15_endP <- left_join(df15_endc, df15_endd, by = "sid")
###*******************************************************************
# Station usage profile
df15_P <- left_join(df15_startP, df15_endP, by = "sid")
fit15_1 <- Mclust(df15_startP)
# p <- plot(fit) # plot results
summary(fit15_1) # display the best model
fit15_2 <- Mclust(df15_endP)
# p <- plot(fit) # plot results
summary(fit15_2) # display the best model
fit15_3 <- Mclust(df15_P)
# p <- plot(fit) # plot results
summary(fit15_3) # display the best model
# p <- plot(fit) # plot results
summary(fit15_2) # display the best model
df15_start <-
df16 %>% select(origin, tripduration, tripcount, month) %>%
group_by(origin, month) %>%
summarise_all(funs(sum, median)) %>%
select(origin, tripcount_sum, tripduration_median, month) %>%
rename(sid = origin,
scount = tripcount_sum, sduration = tripduration_median)
# Count the total number of origin usage by month
df16_startc <- df16_start %>% spread(month, scount) %>% rename(s1 = "1", s2 = "2",
s3 = "3", s4 = "4",
s5 = "5", s6 = "6",
s7 = "7", s8 = "8",
s9 = "9", s10 = "10",
s11 = "11", s12 = "12") %>%
select(-sduration)
df16_start <-
df16 %>% select(origin, tripduration, tripcount, month) %>%
group_by(origin, month) %>%
summarise_all(funs(sum, median)) %>%
select(origin, tripcount_sum, tripduration_median, month) %>%
rename(sid = origin,
scount = tripcount_sum, sduration = tripduration_median)
# Count the total number of origin usage by month
df16_startc <- df16_start %>% spread(month, scount) %>% rename(s1 = "1", s2 = "2",
s3 = "3", s4 = "4",
s5 = "5", s6 = "6",
s7 = "7", s8 = "8",
s9 = "9", s10 = "10",
s11 = "11", s12 = "12") %>%
select(-sduration)
df16_start <-
df16 %>% select(origin, tripduration, tripcount, month) %>%
group_by(origin, month) %>%
summarise_all(funs(sum, median)) %>%
select(origin, tripcount_sum, tripduration_median, month) %>%
rename(sid = origin,
scount = tripcount_sum, sduration = tripduration_median)
# Count the total number of origin usage by month
df16_startc <- df16_start %>% spread(month, scount) %>% select(-sduration)
# Rename spread columns
n <- names(df16_startc)[names(df16_startc) %in% c(1:12)]
names(df16_startc)[names(df16_startc) %in% c(0:12)] <- paste0("s", n)
# Convert NA to ""
df16_startc[is.na(df16_startc)] <- ""
# Merge rows ---> data for one station (sid) store in a singal row
df16_startc <- df16_startc %>% group_by(sid) %>%
summarise_all(funs(trimws(paste(., collapse = ''))))
# Convert the class of hourly count from string to numeric
cols.num <- paste0("s", 1:12)
df16_startc[cols.num] <- sapply(df16_startc[cols.num], as.numeric)
n <- names(df16_startc)[names(df16_startc) %in% c(1:12)]
names(df16_startc)[names(df16_startc) %in% c(0:12)] <- paste0("s", n)
# Convert NA to ""
df16_startc[is.na(df16_startc)] <- ""
# Merge rows ---> data for one station (sid) store in a singal row
df16_startc <- df16_startc %>% group_by(sid) %>%
summarise_all(funs(trimws(paste(., collapse = ''))))
# Convert the class of hourly count from string to numeric
cols.num <- paste0("s", n)
df16_startc[cols.num] <- sapply(df16_startc[cols.num], as.numeric)
paste0("s", n)
df16_start <-
df16 %>% select(origin, tripduration, tripcount, month) %>%
group_by(origin, month) %>%
summarise_all(funs(sum, median)) %>%
select(origin, tripcount_sum, tripduration_median, month) %>%
rename(sid = origin,
scount = tripcount_sum, sduration = tripduration_median)
# Count the total number of origin usage by month
df16_startc <- df16_start %>% spread(month, scount) %>% select(-sduration)
# Rename spread columns
n <- names(df16_startc)[names(df16_startc) %in% c(1:12)]
names(df16_startc)[names(df16_startc) %in% c(0:12)] <- paste0("s", n)
# Convert NA to ""
df16_startc[is.na(df16_startc)] <- ""
# Merge rows ---> data for one station (sid) store in a singal row
df16_startc <- df16_startc %>% group_by(sid) %>%
summarise_all(funs(trimws(paste(., collapse = ''))))
# Convert the class of hourly count from string to numeric
cols.num <- paste0("s", n)
df16_startc[cols.num] <- sapply(df16_startc[cols.num], as.numeric)
# Fill no data with 0
df16_startc[is.na(df16_startc)] <- 0
# Get the annually median trip duration for each station
df16_startd <-
df16 %>% select(origin, tripduration) %>%
group_by(origin) %>%
summarise_all(funs(median)) %>%
rename(sid = origin,
sduration = tripduration)
# Station (origin) usage profile
df16_startP <- left_join(df16_startc, df16_startd, by = "sid")
df16_startP
df16_end <-
df16 %>% select(destination, tripduration, tripcount, month) %>%
group_by(destination, month) %>%
summarise_all(funs(sum, median)) %>%
select(destination, tripcount_sum, tripduration_median, month) %>%
rename(sid = destination,
scount = tripcount_sum, sduration = tripduration_median)
# Count the total number of destination usage by month
df16_endc <- df16_end %>% spread(month, scount) %>% select(-sduration)
# Rename spread columns
n <- names(df16_endc)[names(df16_endc) %in% c(1:12)]
names(df16_endc)[names(df16_endc) %in% c(0:12)] <- paste0("e", n)
# Convert NA to ""
df16_endc[is.na(df16_endc)] <- ""
# Merge rows ---> data for one station (sid) store in a singal row
df16_endc <- df16_endc %>% group_by(sid) %>%
summarise_all(funs(trimws(paste(., collapse = ''))))
# Convert the class of hourly count from string to numeric
cols.num <- paste0("e", n)
df16_endc[cols.num] <- sapply(df16_endc[cols.num], as.numeric)
# Fill no data with 0
df16_endc[is.na(df16_endc)] <- 0
# Get the annually median trip duration for each station
df16_endd <-
df16 %>% select(destination, tripduration) %>%
group_by(destination) %>%
summarise_all(funs(median)) %>%
rename(sid = destination,
eduration = tripduration)
# Station (destination) usage profile
df16_endP <- left_join(df16_endc, df16_endd, by = "sid")
df16_endP
# Station usage profile
df15_P <- left_join(df15_startP, df15_endP, by = "sid")
# Station usage profile
df16_P <- left_join(df16_startP, df16_endP, by = "sid")
fit16_1 <- Mclust(df16_startP)
# p <- plot(fit) # plot results
summary(fit16_1) # display the best model
fit16_2 <- Mclust(df16_endP)
# p <- plot(fit) # plot results
summary(fit16_2) # display the best model
fit16_3 <- Mclust(df16_P)
# p <- plot(fit) # plot results
summary(fit16_3) # display the best model
df17_start <-
df17 %>% select(origin, tripduration, tripcount, month) %>%
group_by(origin, month) %>%
summarise_all(funs(sum, median)) %>%
select(origin, tripcount_sum, tripduration_median, month) %>%
rename(sid = origin,
scount = tripcount_sum, sduration = tripduration_median)
# Count the total number of origin usage by month
df17_startc <- df17_start %>% spread(month, scount) %>% select(-sduration)
# Rename spread columns
n <- names(df17_startc)[names(df17_startc) %in% c(1:12)]
names(df17_startc)[names(df17_startc) %in% c(0:12)] <- paste0("s", n)
# Convert NA to ""
df17_startc[is.na(df17_startc)] <- ""
# Merge rows ---> data for one station (sid) store in a singal row
df17_startc <- df17_startc %>% group_by(sid) %>%
summarise_all(funs(trimws(paste(., collapse = ''))))
# Convert the class of hourly count from string to numeric
cols.num <- paste0("s", n)
df17_startc[cols.num] <- sapply(df17_startc[cols.num], as.numeric)
# Fill no data with 0
df17_startc[is.na(df17_startc)] <- 0
# Get the annually median trip duration for each station
df17_startd <-
df17 %>% select(origin, tripduration) %>%
group_by(origin) %>%
summarise_all(funs(median)) %>%
rename(sid = origin,
sduration = tripduration)
# Station (origin) usage profile
df17_startP <- left_join(df17_startc, df17_startd, by = "sid")
df17_end <-
df17 %>% select(destination, tripduration, tripcount, month) %>%
group_by(destination, month) %>%
summarise_all(funs(sum, median)) %>%
select(destination, tripcount_sum, tripduration_median, month) %>%
rename(sid = destination,
scount = tripcount_sum, sduration = tripduration_median)
# Count the total number of destination usage by month
df17_endc <- df17_end %>% spread(month, scount) %>% select(-sduration)
# Rename spread columns
n <- names(df17_endc)[names(df17_endc) %in% c(1:12)]
names(df17_endc)[names(df17_endc) %in% c(0:12)] <- paste0("e", n)
# Convert NA to ""
df17_endc[is.na(df17_endc)] <- ""
# Merge rows ---> data for one station (sid) store in a singal row
df17_endc <- df17_endc %>% group_by(sid) %>%
summarise_all(funs(trimws(paste(., collapse = ''))))
# Convert the class of hourly count from string to numeric
cols.num <- paste0("e", n)
df17_endc[cols.num] <- sapply(df17_endc[cols.num], as.numeric)
# Fill no data with 0
df17_endc[is.na(df17_endc)] <- 0
# Get the annually median trip duration for each station
df17_endd <-
df17 %>% select(destination, tripduration) %>%
group_by(destination) %>%
summarise_all(funs(median)) %>%
rename(sid = destination,
eduration = tripduration)
# Station (destination) usage profile
df17_endP <- left_join(df17_endc, df17_endd, by = "sid")
# Station usage profile
df17_P <- left_join(df17_startP, df17_endP, by = "sid")
fit17_1 <- Mclust(df17_startP)
# p <- plot(fit) # plot results
summary(fit17_1) # display the best model
fit17_2 <- Mclust(df17_endP)
# p <- plot(fit) # plot results
summary(fit17_2) # display the best model
fit17_2$classification
# p <- plot(fit) # plot results
summary(fit17_2) # display the best model
fit17_3 <- Mclust(df17_P)
df17_P
fit17_3 <- Mclust(df17_P)
# p <- plot(fit) # plot results
summary(fit17_3) # display the best model
df18_start <-
df18 %>% select(origin, tripduration, tripcount, month) %>%
group_by(origin, month) %>%
summarise_all(funs(sum, median)) %>%
select(origin, tripcount_sum, tripduration_median, month) %>%
rename(sid = origin,
scount = tripcount_sum, sduration = tripduration_median)
# Count the total number of origin usage by month
df18_startc <- df18_start %>% spread(month, scount) %>% select(-sduration)
# Rename spread columns
n <- names(df18_startc)[names(df18_startc) %in% c(1:12)]
names(df18_startc)[names(df18_startc) %in% c(0:12)] <- paste0("s", n)
# Convert NA to ""
df18_startc[is.na(df18_startc)] <- ""
# Merge rows ---> data for one station (sid) store in a singal row
df18_startc <- df18_startc %>% group_by(sid) %>%
summarise_all(funs(trimws(paste(., collapse = ''))))
# Convert the class of hourly count from string to numeric
cols.num <- paste0("s", n)
df18_startc[cols.num] <- sapply(df18_startc[cols.num], as.numeric)
# Fill no data with 0
df18_startc[is.na(df18_startc)] <- 0
# Get the annually median trip duration for each station
df18_startd <-
df18 %>% select(origin, tripduration) %>%
group_by(origin) %>%
summarise_all(funs(median)) %>%
rename(sid = origin,
sduration = tripduration)
# Station (origin) usage profile
df18_startP <- left_join(df18_startc, df18_startd, by = "sid")
df18_end <-
df18 %>% select(destination, tripduration, tripcount, month) %>%
group_by(destination, month) %>%
summarise_all(funs(sum, median)) %>%
select(destination, tripcount_sum, tripduration_median, month) %>%
rename(sid = destination,
scount = tripcount_sum, sduration = tripduration_median)
# Count the total number of destination usage by month
df18_endc <- df18_end %>% spread(month, scount) %>% select(-sduration)
# Rename spread columns
n <- names(df18_endc)[names(df18_endc) %in% c(1:12)]
names(df18_endc)[names(df18_endc) %in% c(0:12)] <- paste0("e", n)
# Convert NA to ""
df18_endc[is.na(df18_endc)] <- ""
# Merge rows ---> data for one station (sid) store in a singal row
df18_endc <- df18_endc %>% group_by(sid) %>%
summarise_all(funs(trimws(paste(., collapse = ''))))
# Convert the class of hourly count from string to numeric
cols.num <- paste0("e", n)
df18_endc[cols.num] <- sapply(df18_endc[cols.num], as.numeric)
# Fill no data with 0
df18_endc[is.na(df18_endc)] <- 0
# Get the annually median trip duration for each station
df18_endd <-
df18 %>% select(destination, tripduration) %>%
group_by(destination) %>%
summarise_all(funs(median)) %>%
rename(sid = destination,
eduration = tripduration)
# Station (destination) usage profile
df18_endP <- left_join(df18_endc, df18_endd, by = "sid")
# Station usage profile
df18_P <- left_join(df18_startP, df18_endP, by = "sid")
fit18_1 <- Mclust(df18_startP)
# p <- plot(fit) # plot results
summary(fit18_1) # display the best model
fit18_2 <- Mclust(df18_endP)
# p <- plot(fit) # plot results
summary(fit18_2) # display the best model
fit18_3 <- Mclust(df18_P)
fit18_3 <- Mclust(df18_P)
df18_startP
df18_endP
df18_P
# Station usage profile
df18_P <- full_join(df18_startP, df18_endP, by = "sid")
# Convert NA to ""
df18_P[is.na(df18_P)] <- 0
fit18_3 <- Mclust(df18_P)
# p <- plot(fit) # plot results
summary(fit18_3) # display the best model
# Station usage profile
df17_P <- full_join(df17_startP, df17_endP, by = "sid")
# Convert NA to 0
df17_P[is.na(df17_P)] <- 0
fit17_3 <- Mclust(df17_P)
# p <- plot(fit) # plot results
summary(fit17_3) # display the best model
# p <- plot(fit) # plot results
summary(fit16_3) # display the best model
# Convert NA to 0
df16_P[is.na(df16_P)] <- 0
fit16_3 <- Mclust(df16_P)
# p <- plot(fit) # plot results
summary(fit16_3) # display the best model
# Convert NA to 0
df15_P[is.na(df15_P)] <- 0
df15_P <- full_join(df15_startP, df15_endP, by = "sid")
# Convert NA to 0
df15_P[is.na(df15_P)] <- 0
fit15_3 <- Mclust(df15_P)
# p <- plot(fit) # plot results
summary(fit15_3) # display the best model
fit18_3$classification
class(fit18_3$classification)
ncol(df18_P)
t <- df18_P %>% mutate(C = fit18_3$classification)
ncol(t)
t %>% select(sid, C)
df18_startP <- df18_startP %>% mutate(C = fit18_1$classification)
df18_endP <- df18_endP %>% mutate(C = fit18_2$classification)
df18_P <- df18_P %>% mutate(C = fit18_3$classification)
df18_endP
df15_startP <- df15_startP %>% mutate(C = fit15_1$classification)
df15_endP <- df15_endP %>% mutate(C = fit15_2$classification)
df15_P <- df15_P %>% mutate(C = fit15_3$classification)
df16_startP <- df16_startP %>% mutate(C = fit16_1$classification)
df16_endP <- df16_endP %>% mutate(C = fit16_2$classification)
df16_P <- df16_P %>% mutate(C = fit16_3$classification)
df17_startP <- df17_startP %>% mutate(C = fit17_1$classification)
df17_endP <- df17_endP %>% mutate(C = fit17_2$classification)
df17_P <- df17_P %>% mutate(C = fit17_3$classification)
df15
station15
station15 <- Path15 %>%
map(function(x) {
read_csv(x) %>%
select("start station id", "start station name") %>%
rename(sid = "start station id", sname = "start station name") %>%
mutate(sid  = as.character(sid)) %>%
distinct(sid, sname)
}) %>% set_names(names15)
station15 <- Path15 %>%
map(function(x) {
read_csv(x) %>%
select("start station id", "start station name") %>%
rename(sid = "start station id", sname = "start station name") %>%
mutate(sid  = as.character(sid)) %>%
distinct(sid, sname)
}) %>% set_names(names15)
map(function(x) {
read_csv(x) %>%
select("start station id", "start station name") %>%
rename(sid = "start station id", sname = "start station name") %>%
mutate(sid  = as.character(sid)) %>%
distinct(sid, sname)
})
Path15
station15 <- Path15 %>%
map(function(x) {
read_csv(x) %>%
select("start station id") %>%
rename(sid = "start station id") %>%
mutate(sid  = as.character(sid)) %>%
distinct(sid)
}) %>% set_names(names15)
station15 <- Path15 %>%
map(function(x) {
read_csv(x) %>%
select("start station id") %>%
rename(sid = "start station id", sname = "start station name") %>%
#mutate(sid  = as.character(sid)) %>%
distinct(sid, sname)
}) %>% set_names(names15)
station15 <- Path15 %>%
map(function(x) {
read_csv(x) %>%
select("start station id", "start station name") %>%
rename(sid = "start station id", sname = "start station name") %>%
#mutate(sid  = as.character(sid)) %>%
distinct(sid, sname)
}) %>% set_names(names15)
station15 <- Path15 %>%
map(function(x) {
read_csv(x) #%>%
#   select("start station id", "start station name") %>%
#   rename(sid = "start station id", sname = "start station name") %>%
#   mutate(sid  = as.character(sid)) %>%
#   distinct(sid, sname)
}) %>% set_names(names15)
names15
Path15 <- dir("D:/R_final/BikeSharing_project/BlueBike/2015",
pattern = ".csv", full.names = TRUE)
Path16 <- dir("D:/R_final/BikeSharing_project/BlueBike/2016",
pattern = ".csv", full.names = TRUE)
Path17 <- dir("D:/R_final/BikeSharing_project/BlueBike/2017",
pattern = ".csv", full.names = TRUE)
Path18 <- dir("D:/R_final/BikeSharing_project/BlueBike/2018",
pattern = ".csv", full.names = TRUE)
station15 <- Path15 %>%
map(function(x) {
read_csv(x) #%>%
#   select("start station id", "start station name") %>%
#   rename(sid = "start station id", sname = "start station name") %>%
#   mutate(sid  = as.character(sid)) %>%
#   distinct(sid, sname)
}) %>% set_names(names15)
trips15 <- Path15 %>%
map(function(x) {
read_csv(x) %>%
select("tripduration", "starttime",  "stoptime",
"start station id", "end station id", "year", "month") %>%
rename(origin = "start station id", destination = "end station id") %>%
mutate(origin = as.character(origin),
destination = as.character(destination)) %>%
mutate(c1 = as.character(starttime)) %>%
mutate(c2 = as.character(stoptime)) %>%
mutate(mdY = sub("\\s+.*", "", c1)) %>%
mutate(weekday = as.Date(mdY, "%m/%d/%Y") %>% weekdays()) %>%
mutate(shour = sub(":+.*", "", sub("*.+\\s", "", c1))) %>%
mutate(ehour = sub(":+.*", "", sub("*.+\\s", "", c2))) %>%
mutate(tripcount = 1) %>%
select(-c1, -c2)
}) %>% set_names(names15)
# Read in trip data
names15 <- Path15 %>% basename() %>% substr(., start = 1, stop = 13)
devtools::install_github("agroimpacts/BostonBikeSharingSystem", build_vignettes = TRUE)
browseVignettes("BostonBikeSharingSystem")
devtools::install_github("agroimpacts/BostonBikeSharingSystem", build_vignettes = TRUE)
devtools::install_github("agroimpacts/mzhang346", build_vignettes = TRUE)
devtools::install_github("agroimpacts/geospaar", build_vignettes = TRUE)
install_github("agroimpacts/BostonBikeSharingSystem", build = TRUE,
auth_token = "63f0b2d7bcde89c121f465d92ff4bc4ae5459acd",
force = TRUE, build_opts = c("--no-resave-data", "--no-manual")
